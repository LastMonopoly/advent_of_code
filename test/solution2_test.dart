import 'package:test/test.dart';
import '../bin/solution2.dart';

void main() {
  group('Converts string to point', () {
    test('Small number', () {
      Point p = Point.parse('position=< 6, 10> velocity=<-2, -1>');
      expect(p.x, 6);
      expect(p.y, 10);
      expect(p.dx, -2);
      expect(p.dy, -1);
    });

    test('Big number', () {
      Point p = Point.parse('position=<-40143,  50606> velocity=< 4, -5>');
      expect(p.x, -40143);
      expect(p.y, 50606);
      expect(p.dx, 4);
      expect(p.dy, -5);
    });
  });

  group('Verify output', () {
    late List<Point> points;
    late Point topLeft, bottomRight;

    setUp(() {
      List<String> input = """
position=< 9,  1> velocity=< 0,  2>
position=< 7,  0> velocity=<-1,  0>
position=< 3, -2> velocity=<-1,  1>
position=< 6, 10> velocity=<-2, -1>
position=< 2, -4> velocity=< 2,  2>
position=<-6, 10> velocity=< 2, -2>
position=< 1,  8> velocity=< 1, -1>
position=< 1,  7> velocity=< 1,  0>
position=<-3, 11> velocity=< 1, -2>
position=< 7,  6> velocity=<-1, -1>
position=<-2,  3> velocity=< 1,  0>
position=<-4,  3> velocity=< 2,  0>
position=<10, -3> velocity=<-1,  1>
position=< 5, 11> velocity=< 1, -2>
position=< 4,  7> velocity=< 0, -1>
position=< 8, -2> velocity=< 0,  1>
position=<15,  0> velocity=<-2,  0>
position=< 1,  6> velocity=< 1,  0>
position=< 8,  9> velocity=< 0, -1>
position=< 3,  3> velocity=<-1,  1>
position=< 0,  5> velocity=< 0, -1>
position=<-2,  2> velocity=< 2,  0>
position=< 5, -2> velocity=< 1,  2>
position=< 1,  4> velocity=< 2,  1>
position=<-2,  7> velocity=< 2, -2>
position=< 3,  6> velocity=<-1, -1>
position=< 5,  0> velocity=< 1,  0>
position=<-6,  0> velocity=< 2,  0>
position=< 5,  9> velocity=< 1, -2>
position=<14,  7> velocity=<-2,  0>
position=<-3,  6> velocity=< 2, -1>
"""
          .split('\n');

      points = [];

      for (String line in input) {
        if (line.isNotEmpty) {
          points.add(Point.parse(line));
        }
      }

      List<Point> area = computeArea(points);
      topLeft = area[0];
      bottomRight = area[1];
    });

    test('Initially', () {
      expect(
          computeImage(points, topLeft, bottomRight),
          """
........#.............
................#.....
.........#.#..#.......
......................
#..........#.#.......#
...............#......
....#.................
..#.#....#............
.......#..............
......#...............
...#...#.#...#........
....#..#..#.........#.
.......#..............
...........#..#.......
#...........#.........
...#.......#.........."""
              .split('\n'));
    });
    test('After 1 second', () {
      move(points, 1);

      expect(
          computeImage(points, topLeft, bottomRight),
          """
......................
......................
..........#....#......
........#.....#.......
..#.........#......#..
......................
......#...............
....##.........#......
......#.#.............
.....##.##..#.........
........#.#...........
........#...#.....#...
..#...........#.......
....#.....#.#.........
......................
......................"""
              .split('\n'));
    });
    test('After 2 seconds', () {
      move(points, 2);

      expect(
          computeImage(points, topLeft, bottomRight),
          """
......................
......................
......................
..............#.......
....#..#...####..#....
......................
........#....#........
......#.#.............
.......#...#..........
.......#..#..#.#......
....#....#.#..........
.....#...#...##.#.....
........#.............
......................
......................
......................"""
              .split('\n'));
    });

    test('After 3 seconds', () {
      move(points, 3);

      expect(
          computeImage(points, topLeft, bottomRight),
          """
......................
......................
......................
......................
......#...#..###......
......#...#...#.......
......#...#...#.......
......#####...#.......
......#...#...#.......
......#...#...#.......
......#...#...#.......
......#...#..###......
......................
......................
......................
......................"""
              .split('\n'));
    });

    test('After 4 seconds', () {
      move(points, 4);

      expect(
          computeImage(points, topLeft, bottomRight),
          """
......................
......................
......................
............#.........
........##...#.#......
......#.....#..#......
.....#..##.##.#.......
.......##.#....#......
...........#....#.....
..............#.......
....#......#...#......
.....#.....##.........
...............#......
...............#......
......................
......................"""
              .split('\n'));
    });
  });
}
